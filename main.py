#!/usr/bin/env python3
"""
Site Checker - AI –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å–∞–π—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py https://example.com
    python main.py --url https://example.com --verbose
"""

import asyncio
import json
import sys
import argparse
from typing import Optional
import os
from dotenv import load_dotenv

from src.agents import SiteAnalyzer


async def analyze_site(url: str, verbose: bool = False) -> None:
    """–ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    
    if verbose:
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞: {url}")
        print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SiteAnalyzer()
        
        if verbose:
            print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∞–π—Ç–∞...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        report = await analyzer.analyze_site(url)
        
        if verbose:
            print("ü§ñ AI –∞–Ω–∞–ª–∏–∑...")
            print("=" * 50)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print_report(report, verbose)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}", file=sys.stderr)
        sys.exit(1)


def print_report(report, verbose: bool = False) -> None:
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞"""
    
    result = report.analysis_result
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üåê URL: {result.url}")
    print(f"‚ö†Ô∏è  –†–∏—Å–∫: {result.risk_score:.1f}/10")
    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.0%}")
    print(f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.recommendation}")
    
    # –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
    if result.suspicious_elements:
        print(f"\\nüö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
        for element in result.suspicious_elements:
            print(f"  ‚Ä¢ {element}")
    
    if result.legitimate_indicators:
        print(f"\\n‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ –ª–µ–≥–∏—Ç–∏–º–Ω–æ—Å—Ç–∏:")
        for indicator in result.legitimate_indicators:
            print(f"  ‚Ä¢ {indicator}")
    
    # –§–ª–∞–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if verbose:
        flags = result.security_flags
        print(f"\\nüîí –§–ª–∞–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        print(f"  ‚Ä¢ HTTPS: {'‚úÖ' if flags.has_https else '‚ùå'}")
        print(f"  ‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: {'‚ö†Ô∏è' if flags.has_suspicious_keywords else '‚úÖ'}")
        print(f"  ‚Ä¢ –§–æ—Ä–º—ã –≤—Ö–æ–¥–∞: {'‚ö†Ô∏è' if flags.has_login_forms else '‚úÖ'}")
        print(f"  ‚Ä¢ –§–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã: {'‚ö†Ô∏è' if flags.has_payment_forms else '‚úÖ'}")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –±—Ä–µ–Ω–¥–æ–≤
    if result.brand_impersonation:
        print(f"\\nüë• –í–æ–∑–º–æ–∂–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è: {result.brand_impersonation}")
    
    # –ü–æ—è—Å–Ω–µ–Ω–∏–µ
    print(f"\\nüí≠ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:")
    print(f"  {result.explanation}")
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if verbose:
        print(f"\\nüìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {report.processing_time:.2f}—Å")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å–∞–π—Ç–∞: {report.site_content.response_time:.2f}—Å")
        print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å –∫–æ–¥: {report.site_content.status_code}")
        
        if report.errors:
            print(f"  ‚Ä¢ –û—à–∏–±–∫–∏: {', '.join(report.errors)}")


def setup_environment() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ OpenAI
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º –∫–ª—é—á–æ–º OpenAI –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="Site Checker - AI –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å–∞–π—Ç–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py https://example.com
  python main.py --url https://suspicious-site.com --verbose
  python main.py https://paypal-security.fake --verbose
        """
    )
    
    parser.add_argument(
        "url", 
        nargs="?",
        help="URL —Å–∞–π—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    parser.add_argument(
        "--url",
        help="URL —Å–∞–π—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)"
    )
    
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    
    parser.add_argument(
        "--json",
        action="store_true", 
        help="–í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
    )
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL
    url = args.url or getattr(args, 'url', None)
    if not url:
        parser.print_help()
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
    if not (url.startswith("http://") or url.startswith("https://")):
        url = "https://" + url
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_environment()
    
    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    try:
        if args.verbose:
            print("üöÄ Site Checker - AI Phishing Detection")
            print("=" * 50)
        
        asyncio.run(analyze_site(url, args.verbose))
        
    except KeyboardInterrupt:
        print("\\n‚ùå –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)


if __name__ == "__main__":
    main()